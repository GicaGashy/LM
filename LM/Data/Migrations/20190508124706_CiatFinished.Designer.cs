// <auto-generated />
using System;
using LM.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LM.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190508124706_CiatFinished")]
    partial class CiatFinished
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("LM.Models.LM.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("DepartmentId");

                    b.ToTable("Departments");

                    b.HasData(
                        new { DepartmentId = 1, Description = "Infrastructure stuff", Name = "Infrastructure" }
                    );
                });

            modelBuilder.Entity("LM.Models.LM.Purpose", b =>
                {
                    b.Property<int>("PurposeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("PurposeId");

                    b.ToTable("Purposes");
                });

            modelBuilder.Entity("LM.Models.LM.Reseller", b =>
                {
                    b.Property<int>("ResellerId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Country");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("ResellerId");

                    b.ToTable("Reseller");
                });

            modelBuilder.Entity("LM.Models.LM.Software", b =>
                {
                    b.Property<int>("SoftwareId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AppUserId");

                    b.Property<int>("Availability");

                    b.Property<int>("Confidentiality");

                    b.Property<string>("Description");

                    b.Property<int>("Integrity");

                    b.Property<bool>("IsInternetFacing");

                    b.Property<bool>("IsMobile");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("ItOwnerName")
                        .HasMaxLength(255);

                    b.Property<int?>("ItOwnerTeamId");

                    b.Property<DateTime?>("LicenseEnd");

                    b.Property<DateTime?>("LicenseStart");

                    b.Property<int?>("LicensesInUse");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("PurposeId");

                    b.Property<int?>("ResellerId");

                    b.Property<DateTime?>("Review");

                    b.Property<DateTime?>("Standardized");

                    b.Property<int>("TechAreaId");

                    b.Property<int>("TipiId");

                    b.Property<int?>("TotalLicenses");

                    b.Property<int>("Traceability");

                    b.Property<string>("UseCases");

                    b.Property<string>("Vendor");

                    b.Property<string>("Version");

                    b.HasKey("SoftwareId");

                    b.HasIndex("AppUserId");

                    b.HasIndex("ItOwnerTeamId");

                    b.HasIndex("PurposeId");

                    b.HasIndex("ResellerId");

                    b.HasIndex("TechAreaId");

                    b.HasIndex("TipiId");

                    b.ToTable("Softwares");
                });

            modelBuilder.Entity("LM.Models.LM.SoftwareBusinessOwnerTeam", b =>
                {
                    b.Property<int>("SoftwareId");

                    b.Property<int>("BusinessOwnerTeamId");

                    b.HasKey("SoftwareId", "BusinessOwnerTeamId");

                    b.HasIndex("BusinessOwnerTeamId");

                    b.ToTable("SoftwareBusinessOwnerTeams");
                });

            modelBuilder.Entity("LM.Models.LM.SoftwareTeam", b =>
                {
                    b.Property<int>("SoftwareId");

                    b.Property<int>("TeamId");

                    b.HasKey("SoftwareId", "TeamId");

                    b.HasIndex("TeamId");

                    b.ToTable("SoftwareTeams");
                });

            modelBuilder.Entity("LM.Models.LM.Team", b =>
                {
                    b.Property<int>("TeamId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DepartmentId");

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("SoftwareId");

                    b.HasKey("TeamId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("SoftwareId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("LM.Models.LM.TechArea", b =>
                {
                    b.Property<int>("TechAreaId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("Image");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("TechAreaId");

                    b.ToTable("TechAreas");
                });

            modelBuilder.Entity("LM.Models.LM.Tipi", b =>
                {
                    b.Property<int>("TipiId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("Rate");

                    b.HasKey("TipiId");

                    b.ToTable("Tipies");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("LM.Models.LM.AppUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<int?>("TeamId");

                    b.HasIndex("TeamId");

                    b.ToTable("AppUser");

                    b.HasDiscriminator().HasValue("AppUser");
                });

            modelBuilder.Entity("LM.Models.LM.Software", b =>
                {
                    b.HasOne("LM.Models.LM.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId");

                    b.HasOne("LM.Models.LM.Team", "ItOwner")
                        .WithMany("ItSoftwares")
                        .HasForeignKey("ItOwnerTeamId");

                    b.HasOne("LM.Models.LM.Purpose", "Purpose")
                        .WithMany()
                        .HasForeignKey("PurposeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LM.Models.LM.Reseller", "Reseller")
                        .WithMany()
                        .HasForeignKey("ResellerId");

                    b.HasOne("LM.Models.LM.TechArea", "TechArea")
                        .WithMany()
                        .HasForeignKey("TechAreaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LM.Models.LM.Tipi", "Tipi")
                        .WithMany()
                        .HasForeignKey("TipiId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LM.Models.LM.SoftwareBusinessOwnerTeam", b =>
                {
                    b.HasOne("LM.Models.LM.Team", "BusinessOwnerTeam")
                        .WithMany("SoftwareBusinessOwnerTeams")
                        .HasForeignKey("BusinessOwnerTeamId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LM.Models.LM.Software", "Software")
                        .WithMany("SoftwareBusinessOwnerTeams")
                        .HasForeignKey("SoftwareId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LM.Models.LM.SoftwareTeam", b =>
                {
                    b.HasOne("LM.Models.LM.Software", "Software")
                        .WithMany("SoftwareTeams")
                        .HasForeignKey("SoftwareId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LM.Models.LM.Team", "Team")
                        .WithMany("SoftwareTeams")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LM.Models.LM.Team", b =>
                {
                    b.HasOne("LM.Models.LM.Department", "Department")
                        .WithMany("Teams")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LM.Models.LM.Software")
                        .WithMany("Teams")
                        .HasForeignKey("SoftwareId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LM.Models.LM.AppUser", b =>
                {
                    b.HasOne("LM.Models.LM.Team", "Team")
                        .WithMany("AppUsers")
                        .HasForeignKey("TeamId");
                });
#pragma warning restore 612, 618
        }
    }
}
